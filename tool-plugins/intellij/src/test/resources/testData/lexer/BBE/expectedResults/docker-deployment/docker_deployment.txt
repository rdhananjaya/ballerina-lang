import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('docker')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Adding the @docker:Expose{} annotation to a listner endpoint will expose the endpoint port.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('docker')
: (':')
identifier ('Expose')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Adding the @docker:Confing{} annotation to a service modifies the generated Docker image and Dockerfile.')
WHITE_SPACE ('\n')
LINE_COMMENT ('//This sample will generate a docker image as `helloworld:v1.0.0`.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('docker')
: (':')
identifier ('Config')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Docker image name should be helloworld.')
WHITE_SPACE ('\n    ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"helloworld"')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Docker image version should be v1.0.')
WHITE_SPACE ('\n    ')
identifier ('tag')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"v1.0"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/helloWorld"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('sayHello')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('outboundEP')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('response')
. ('.')
identifier ('setTextPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Hello World from Docker ! \n"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('outboundEP')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                           ')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
