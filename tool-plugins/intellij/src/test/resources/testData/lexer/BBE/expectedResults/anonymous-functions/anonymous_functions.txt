import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define the anonymous function.')
WHITE_SPACE ('\n    ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
identifier ('anonFunction')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('x')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Output: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('anonFunction')
( ('(')
QUOTED_STRING_LITERAL ('"Hello "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"World.!!!"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// If an anonymous function contains only the return statement in the body,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// you can use the arrow function expression instead of the anonymous function.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can infer the type of input parameters from the lhs.')
WHITE_SPACE ('\n    ')
function ('function')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
identifier ('arrowExpression')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                                                ')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Output: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('arrowExpression')
( ('(')
QUOTED_STRING_LITERAL ('"Hello "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"World.!!!"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
