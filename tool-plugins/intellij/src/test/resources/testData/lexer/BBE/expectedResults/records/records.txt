import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Grades')
WHITE_SPACE (' ')
identifier ('grades')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
... ('...')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Grades')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('maths')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('physics')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('chemistry')
; (';')
WHITE_SPACE ('\n    ')
! ('!')
... ('...')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates an instance of the `Student` record with an empty record literal. The implicit initial value of each')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// field type is assigned to the corresponding field.')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates an instance of the `Student` record with a non-empty record literal.')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John Doe"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('17')
, (',')
WHITE_SPACE (' ')
identifier ('grades')
: (':')
WHITE_SPACE (' ')
{ ('{')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
, (',')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
, (',')
WHITE_SPACE (' ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('65')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches the value of a specific field in this record. To access fields, use the dot (.) or the index operator.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s2')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s2')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches a field of a nested record.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s2')
. ('.')
identifier ('grades')
. ('.')
identifier ('maths')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This sets the value of a field.')
WHITE_SPACE ('\n    ')
identifier ('s1')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('s1')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('19')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This adds an additional field not defined in the record type definition above.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Note that an attempt to add additional fields to a closed record results in compile errors.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// e.g., `s1.grades.ict = 77;`')
WHITE_SPACE ('\n    ')
identifier ('s1')
. ('.')
identifier ('department')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Computer Science"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Records are iterable. Therefore, records can be used with foreach loops. Either the value of the field or')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// both the name and the value of the field can be used as the foreach variable(s).')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The type of the field name is string. The variable type for the value depends on the types of fields of the record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the fields and the rest descriptor are of same type (or if it is a closed record, the rest descriptor does not matter),')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the variable will also be of that same type. If not, the variable will be an `any` variable.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('total')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
identifier ('grade')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('s2')
. ('.')
identifier ('grades')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('total')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('grade')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('subj')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('grade')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Average grade: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('total')
/ ('/')
DECIMAL_FLOATING_POINT_NUMBER ('3.0')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Since records are iterable, the iterable operations `foreach()`, `map()`, `filter()`, `count()` can also be performed on records.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In addition to these, if all the fields (including the rest descriptor, if it is an open record) are either of type `int` or `float`,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the iterable operations `sum()`, `average()`, `max()` and `min()` are allowed as well.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('letterGrades')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('s2')
. ('.')
identifier ('grades')
. ('.')
map ('map')
( ('(')
identifier ('mapToLetterGrade')
) (')')
WHITE_SPACE ('\n                                        ')
. ('.')
identifier ('filter')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
identifier ('entry')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('entry')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"A"')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('entry')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                                                ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n                                            ')
} ('}')
WHITE_SPACE ('\n                                            ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n                                        ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('letterGrades')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Average grade using iterable ops: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s2')
. ('.')
identifier ('grades')
. ('.')
identifier ('average')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('mapToLetterGrade')
( ('(')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
identifier ('entry')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
identifier ('grade')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('entry')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"A"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
DECIMAL_INTEGER_LITERAL ('70')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('60')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('grade')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('50')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"D"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('subj')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"F"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
