import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('config')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('kubernetes')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Add @kubernetes:Service to a listner endpoint to expose the endpoint as Kubernetes Service.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('kubernetes')
: (':')
identifier ('Service')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Service type is `NodePort`.')
WHITE_SPACE ('\n    ')
identifier ('serviceType')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"NodePort"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('//Add @kubernetes:Ingress to a listner endpoint to expose the endpoint as Kubernetes Ingress.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('kubernetes')
: (':')
identifier ('Ingress')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Hostname of the service is `abc.com`.')
WHITE_SPACE ('\n    ')
identifier ('hostname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"abc.com"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Ballerina will automatically create Kubernetes secrets for the keystore and trustore when @kubernetes:Service')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//annotation is added to the endpoint.')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Add @kubernetes:ConfigMap annotation to a Ballerna service to mount configs to the container.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('kubernetes')
: (':')
identifier ('ConfigMap')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Path to the ballerina.conf file.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//If providing releative path, then the path should be releative to where `ballerina build` command executed.')
WHITE_SPACE ('\n    ')
identifier ('ballerinaConf')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./ballerina.conf"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('//Add @kubernetes:Deployment annotation to a Ballerna service generate Kuberenetes Deployment for a Ballerina package.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('kubernetes')
: (':')
identifier ('Deployment')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Enable Kubernetes liveness probe to this service.')
WHITE_SPACE ('\n    ')
identifier ('enableLiveness')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Generate a single yaml file.')
WHITE_SPACE ('\n    ')
identifier ('singleYAML')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Genrate Docker image with name `kubernetes:v1.0`.')
WHITE_SPACE ('\n    ')
identifier ('image')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"kubernetes:v.1.0"')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Uncomment and change the following values accordingly if you are using minikube.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('////,dockerHost:"tcp://<minikube IP>:2376",')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('////dockerCertPath:"<HOME_DIRECTORY>/.minikube/certs"')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/helloWorld"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/config/{user}"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('getConfig')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('outboundEP')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('user')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('userId')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getConfigValue')
( ('(')
identifier ('user')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"userid"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('groups')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getConfigValue')
( ('(')
identifier ('user')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"groups"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"{userId: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('userId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", groups: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('groups')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"} \n"')
; (';')
WHITE_SPACE ('\n        ')
identifier ('outboundEP')
-> ('->')
identifier ('respond')
( ('(')
identifier ('payload')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getConfigValue')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('instanceId')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('property')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('instanceId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"."')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('property')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('config')
: (':')
identifier ('getAsString')
( ('(')
identifier ('key')
, (',')
WHITE_SPACE (' ')
identifier ('default')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Invalid User"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
