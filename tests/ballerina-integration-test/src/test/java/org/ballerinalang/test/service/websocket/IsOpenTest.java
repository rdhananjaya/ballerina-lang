/*
 *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.ballerinalang.test.service.websocket;

import org.ballerinalang.test.context.BallerinaTestException;
import org.ballerinalang.test.context.LogLeecher;
import org.ballerinalang.test.util.websocket.client.WebSocketTestClient;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;

import java.net.URISyntaxException;

/**
 * Test the value of isOpen in different situations.
 * (Uses the isOpen.bal file)
 */
@Test(groups = "websocket-test")
public class IsOpenTest extends WebSocketTestCommons {

    private WebSocketTestClient client;
    private static final String URL = "ws://localhost:9078";
    private LogLeecher logLeecher;

    @Test(description = "Test isOpen when close is called")
    public void testIsOpenCloseCalled() throws InterruptedException, BallerinaTestException, URISyntaxException {
        String expectingErrorLog = "In onText isOpen false";
        logLeecher = new LogLeecher(expectingErrorLog);
        serverInstance.addLogLeecher(logLeecher);
        client = new WebSocketTestClient(URL);
        client.handshake();
        client.sendText("Hello World!!");
        logLeecher.waitForText(TIMEOUT_IN_SECS * 1000);
    }

    @Test(description = "Test isOpen when a close frame is received")
    public void testIsOpenCloseFrameReceived() throws InterruptedException, BallerinaTestException, URISyntaxException {
        String expectingErrorLog = "In onClose isOpen true";
        logLeecher = new LogLeecher(expectingErrorLog);
        serverInstance.addLogLeecher(logLeecher);
        client = new WebSocketTestClient(URL);
        client.handshake();
        client.sendCloseFrameWithoutCloseCode();
        logLeecher.waitForText(TIMEOUT_IN_SECS * 1000);
    }

    @Test(description = "Test isOpen in onError resource")
    public void testCloseInOnError() throws InterruptedException, BallerinaTestException, URISyntaxException {
        String expectingErrorLog = "In onError isOpen false";
        logLeecher = new LogLeecher(expectingErrorLog);
        serverInstance.addLogLeecher(logLeecher);
        client = new WebSocketTestClient(URL);
        client.handshake();
        client.sendCorruptedFrame();
        logLeecher.waitForText(TIMEOUT_IN_SECS * 1000);
    }

    @AfterMethod
    public void shutDown() throws InterruptedException {
        client.shutDown();
    }
}
